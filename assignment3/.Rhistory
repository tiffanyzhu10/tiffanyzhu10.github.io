knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
setwd("~/Documents/GitHub/tiffanyzhu10.github.io/assignment3")
library(tidyverse)
library(plotly)
library(sf)
library(tigris)
library(leaflet)
library(zoo)
library(censusapi)
library(tidycensus)
library(corrplot)
census_api_key("5ace7165d1f551af1a6a8876ee3986faa544ea83")
Sys.setenv(CENSUS_KEY="5ace7165d1f551af1a6a8876ee3986faa544ea83")
# Get PUMS and PUMAS data
pums_vars_2019 = pums_variables %>%
filter(year == 2019, survey == "acs1")
pums_vars_2019_inds = pums_vars_2019 %>%
distinct(var_code, var_label, data_type, level) %>%
filter(level == "person")
ca_pums = readRDS("ca_pums.rds")
ca_pumas = pumas("CA", cb = T, progress_bar = F)
# Isolate Bay Area PUMS
bay_county_names =
c(
"Alameda",
"Contra Costa",
"Marin",
"Napa",
"San Francisco",
"San Mateo",
"Santa Clara",
"Solano",
"Sonoma"
)
ca_counties = counties("CA", cb = T, progress_bar = F)
bay_counties = ca_counties %>%
filter(NAME %in% bay_county_names)
bay_pumas = ca_pumas %>%
st_centroid() %>%
.[bay_counties, ] %>%
mutate(PUMACE10 = as.numeric(PUMACE10)) %>%
st_set_geometry(NULL) %>%
left_join(ca_pumas %>% select(GEOID10)) %>%
st_as_sf()
bay_pums = ca_pums %>%
mutate(PUMA = as.numeric(PUMA)) %>%
filter(PUMA %in% bay_pumas$PUMACE10)
bay_pums
# Clean dataset
# Filter out all children under age 3 (SCHL == bb)
# Convert "character"-encoded variables MAR and SCHL to doubles
# Filter dataset so all individuals are over 18 years old
# Create new variable "married" representing number of ever-married individuals in each PUMA
# Create new variable "college" representing number of college-educated individuals in each PUMA
# Collapse to PUMAs
# Calculate percentage of married and college-educated people in each PUMA
# Additionally calculate weighted mean income in each PUMA
bay_marriage = bay_pums %>%
filter(SCHL != "bb") %>%
mutate(MAR = as.numeric(MAR),
SCHL = as.numeric(SCHL)) %>%
filter(AGEP >= 18) %>%
mutate(married = ifelse(
(MAR < 5),
PWGTP,
0),
college = ifelse(
(SCHL >= 21),
PWGTP,
0
)
) %>%
group_by(PUMA) %>%
summarize(mean_personal_income = weighted.mean(PINCP, PWGTP, na.rm = T),
perc_married = sum(married, na.rm = T)/
sum(PWGTP, na.rm = T)*100,
perc_college = sum(college, na.rm = T)/
sum(PWGTP, na.rm = T)*100)
bay_marriage
bay_marriage_map = bay_marriage %>%
left_join(bay_pumas %>% select(PUMACE10),
by = c("PUMA" = "PUMACE10")) %>%
st_as_sf()
saveRDS(bay_marriage_map, file = "../testfile-asst9/bay_marriage_map.rds")
marriage_pal = colorNumeric(palette = "Oranges",
domain = bay_marriage_map$perc_married)
leaflet() %>%
addTiles() %>%
addPolygons(data = bay_marriage_map,
fillColor = ~marriage_pal(perc_married),
color = "white",
opacity = 0.5,
fillOpacity = 0.5,
weight = 1,
label = ~paste0(round(perc_married),
"% married individuals"),
highlightOptions = highlightOptions(weight = 2,
opacity = 1)) %>%
addLegend(data = bay_marriage_map,
pal = marriage_pal,
values = ~perc_married,
title = "Percentage of population<br>that is or has been married")
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Documents/GitHub/tiffanyzhu10.github.io/assignment1")
library(tidyverse)
library(plotly)
library(sf)
library(tigris)
library(leaflet)
library(zoo)
# First prep 2017-19 electric data
years = 2017:2019
quarters = 1:4
type = "Electric"
pge_elec = NULL
for(year in years) {
for(quarter in quarters) {
filename = paste0("PGE_", year, "_Q", quarter, "_", type, "UsageByZip.csv")
temp = read_csv(filename)
pge_elec = rbind(pge_elec, temp)
saveRDS(pge_elec, "pge_elec.rds")
}
}
# Add 2020 data manually
pge_elec_20_q1 = read_csv("PGE_2020_Q1_ElectricUsageByZip.csv")
pge_elec_20_q2 = read_csv("PGE_2020_Q2_ElectricUsageByZip.csv")
pge_elec = rbind(pge_elec, pge_elec_20_q1)
pge_elec = rbind(pge_elec, pge_elec_20_q2)
# Convert kWhs to kBTUs (1 kWh = 3412.14 BTUs = 3.412 kBTUs)
# Drop TOTALKWH and AVERAGEKWH
# Filter for commercial and residential electricity
pge_elec = pge_elec %>%
mutate(TOTALKBTU = TOTALKWH*3.412) %>%
select(!c(TOTALKWH, AVERAGEKWH)) %>%
filter(CUSTOMERCLASS %in% c("Elec- Residential", "Elec- Commercial"))
# Then prep 2017-19 gas data
years = 2017:2019
quarters = 1:4
type = "Gas"
pge_gas = NULL
for(year in years) {
for(quarter in quarters) {
filename = paste0("PGE_", year, "_Q", quarter, "_", type, "UsageByZip.csv")
temp = read_csv(filename)
pge_gas = rbind(pge_gas, temp)
saveRDS(pge_gas, "pge_gas.rds")
}
}
# Add 2020 data manually
pge_gas_20_q1 = read_csv("PGE_2020_Q1_GasUsageByZip.csv")
pge_gas_20_q2 = read_csv("PGE_2020_Q2_GasUsageByZip.csv")
pge_gas = rbind(pge_gas, pge_gas_20_q1)
pge_gas = rbind(pge_gas, pge_gas_20_q2)
# Convert therms to kBTUs (1 therm = 100,000 BTUs = 100 kBTUs)
# Drop TOTALTHM and AVERAGETHM
# Filter for commercial and residential gas
pge_gas = pge_gas %>%
mutate(TOTALKBTU = TOTALTHM*100) %>%
select(!c(TOTALTHM, AVERAGETHM)) %>%
filter(CUSTOMERCLASS %in% c("Gas- Residential", "Gas- Commercial"))
# Combine datasets
# Add column for average kBTUs per customer
# Add column for month and year combined (assume 1st day of month)
pge_all = NULL
pge_all = rbind(pge_all, pge_elec)
pge_all = rbind(pge_all, pge_gas)
pge_all = mutate(pge_all, AVERAGEKBTU = TOTALKBTU/TOTALCUSTOMERS)
pge_all$DATE = as.yearmon(paste(pge_all$YEAR, pge_all$MONTH), "%Y %m")
# Drop duplicate entries (there are duplicate entries in September 2017)
# Note that there is only one customer of each type in each zip code for each month, so aggregated together, the zip code, month, year, and type serve as a kind of unique ID.
pge_all = pge_all[!duplicated(pge_all[c(1,2,3,4)]),]
# Show dataset
pge_all
# Getting list of Bay Area zip codes
ca_counties <- counties("CA", cb = T, progress_bar = F)
bay_county_names <-
c(
"Alameda",
"Contra Costa",
"Marin",
"Napa",
"San Francisco",
"San Mateo",
"Santa Clara",
"Solano",
"Sonoma"
)
bay_counties = ca_counties %>%
filter(NAME %in% bay_county_names)
usa_zips = zctas(cb = TRUE, progress_bar = FALSE)
bay_zips = usa_zips %>%
st_centroid() %>%
.[bay_counties, ] %>%
st_set_geometry(NULL) %>%
left_join(usa_zips %>% select(GEOID10)) %>%
st_as_sf()
# Reducing dataset to Bay Area entities
pge_bay = pge_all %>%
mutate(ZIPCODE = ZIPCODE %>% as.character()) %>%
filter(ZIPCODE %in% bay_zips$GEOID10)
pge_bay_plotly = plot_ly() %>% add_trace(data = pge_bay %>%
filter(CUSTOMERCLASS == "Elec- Commercial"),
x = ~DATE %>% factor(),
y = ~TOTALKBTU,
type = "bar",
name = "Commercial (Electricity)") %>%
add_trace(data = pge_bay %>%
filter(CUSTOMERCLASS == "Gas- Commercial"),
x = ~DATE %>% factor(),
y = ~TOTALKBTU,
type = "bar",
name = "Commercial (Gas)") %>%
add_trace(data = pge_bay %>%
filter(CUSTOMERCLASS == "Elec- Residential"),
x = ~DATE %>% factor(),
y = ~TOTALKBTU,
type = "bar",
name = "Residential (Electricity)") %>%
add_trace(data = pge_bay %>%
filter(CUSTOMERCLASS == "Gas- Residential"),
x = ~DATE %>% factor(),
y = ~TOTALKBTU,
type = "bar",
name = "Residential (Gas)") %>%
layout(xaxis = list(title = "Date",
fixedrange = T),
yaxis = list(title = "kBTU",
fixedrange = T),
barmode = "stack",
legend = list(title = list(text = "Energy User"))) %>%
config(displayModeBar = F)
saveRDS(pge_bay_plotly, file = "../testfile-asst9/pge_bay_plotly.rds")
pge_bay_plotly
install.packages("rsconnect")
rsconnect::setAccountInfo(name='tiffanyzhu10', token='FC79EFE9D1F271EAC719123B649F132E', secret='3fQZOSt7kP9TMIjAkFBwi7KbSJ+Q/qEgXMo+DZVB')
